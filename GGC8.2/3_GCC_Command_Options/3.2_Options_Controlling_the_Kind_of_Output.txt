url:https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gcc/Overall-Options.html#Overall-Options

3.2 选项控制输出格式
	编译可以被总结为4步(按顺序):预编译,编译,汇编和链接。GCC擅长预编译和编译多个文件到多个汇编文件或者一个汇编文件中. 然后每一个汇编文件生成一个object文件(译者注: .o 文件)。最后链接所有的 .o 文件生成可执行文件。

	
	对于任何给定的文件, 文件的后缀和处在编译的哪一步是确定的:
	file.c
		C语言源代码,且必须被预编译。
	file.i
		C语言代码,不需要预编译(译者注:或者可以理解为已经被预编译)、
	file.ii
		C++语言代码,不需要预编译
	file.m
		Objective-C代码, 必须链接libobjc 库使Objective-C项目工作。
	file.mi
		Objective-C语言代码,不需要预编译
	file.mm
	file.M
		Objective-C++代码, 必须链接libobjc 库使Objective-C++项目工作。注意 '.M'大写。
	file.h
		C, C++, Objective-C or Objective-C++ 头文件。会在预编译时替换到文件的头部。使用 -fdump-ada-spec选型会生成ada文件。(译者注: 在本目录下的testDemo目录中 使用 gcc test_demo.c -fdump-ada-spec 会生成 test_demo_c.ads, 使用 gcc test_demo.h -fdump-ada-spec 会生成 test_demo_h.ads. ada简介:http://www.360doc.com/content/12/0806/09/1671317_228581476.shtml)
	
	file.cc
	file.cp
	file.cxx
	file.cpp
	file.CPP
	file.c++
	file.C
		C语言源代码,且必须被预编译。注意 .cxx 有两个x。 .C 大写
	
	file.mm
	file.M
		Objective-C++语言源代码,且必须被预编译。
	file.mii
		Objective-C++语言代码,不需要预编译
	
	file.hh
	file.H
	file.hp
	file.hxx
	file.hpp
	file.HPP
	file.h++
	file.tcc
		C ++头文件,会被转换为预编译头或Ada规范。
		
	file.f
	file.for
	file.ftn
	Fixed形式不应预处理的Fortran源代码。

	file.F
	file.FOR
	file.fpp
	file.FPP
	file.FTN
	Fixed形式预处理的Fortran源代码（使用传统的预处理器）。	
		
	file.f90
	file.f95
	file.f03
	file.f08
	自由形式的Fortran源代码，不应该进行预处理。

	file.F90
	file.F95
	file.F03
	file.F08
	自由形式的Fortran源代码，必须进行预处理(使用传统的预处理器)。
		
	file.go
	go 语言源码
		
	file.brig
	BRIG文件（HSAIL的二进制表示）。
	
	file.ads
	Ada源代码文件，包含库单元声明(包的声明,子软件,通用声明)，或库单元重命名声明(包，通用或子程序重命名声明)。这些文件也称为specs。
		
	file.s
	汇编代码
	
	file.S
	file.sx
	需要被预编译的汇编
	
	other
	要直接送入链接的目标文件。任何没有识别后缀的文件名都以这种方式处理。
		
	你可以显式使用 -x 指定语言:
	-x language
	明确的为该选项后面的的输入文件指定语言(而不是通过文件的后缀让编译器自己识别),该选项适用于后面的所有输入文件，知道下一个 -x。language的可能值为:
	c  c-header  cpp-output
	c++  c++-header  c++-cpp-output
	objective-c  objective-c-header  objective-c-cpp-output
	objective-c++ objective-c++-header objective-c++-cpp-output
	assembler  assembler-with-cpp
	ada
	f77  f77-cpp-input f95  f95-cpp-input
	go
	brig
		
	-x none
	关闭所有的language规范,使得文件能够根据他们的后缀被处理.(如果 -x 选项没有被使用过)。
	
	如果你仅仅想得到编译的各个阶段,你可以使用 -x(或者文件名后缀)告诉GCC从哪里开始,并且使用 -c -S 或 -E 告诉GCC从哪里结束。请注意, 一些选项的组合不能使得GCC工作(例如: '-x cpp-output -E’)
	
	-c 
	编译或汇编源码文件,但是不链接。链接阶段没有完成。最终的输入文件是 object 文件.
	一般来说, object 文件是将源文件的后缀 .c .s .i 等替换为 .object
	对于无法识别, 或者不需要编译或汇编的文件将会被忽略。
	
	-S
	编译后停止,不作汇编操作。对于每个未汇编过的输入文件,输入文件是汇编代码。
	一般来说,汇编文件是将源文件的后缀 .c .i 替换为 .shtml
	
	不识别的输如文件将会被忽略
	
	-E
	预编译后停止, 不作编译操作,输出的是预编译代码,该输出将会发送到标准输出。
	
	不需要预编译的文件将会被忽略。
	
	-o file 
	指定输出文件为file.这适用于任何形式的输出,不管是得到可执行文件,.o文件,汇编文件 或者是预处理文件。
	如果没有指定 -o, 则默认的可执行文件的输出文件为 a.out,source.suffix 的.o文件为source.o,其汇编形式为 source.s,预编译头文件形式为 source.suffix.gch, 且所有的预编译C代码显示在标准输出。
	
	-v
	在标准输出上显示编译阶段的指令,同时将编译驱动的版本号,预编译器和编译器的版本号打印出来。

	-###
	类似 -v,但是这个选项并不具有编译动作.仅仅显示编译过程。这对于s​​hell脚本捕获驱动程序生成的命令行很有用。(译者注:参考 https://elinux.org/GCC_Tips#Tips)
	
	--help
	在标准输出打印GCC命令行选项,如果同时指定了-v,--help将会传递GCC调用的进程。因此它能显示所有GCC能接受的编译选项,如果同时指定了  -Wextra 选项(在--help 之前),会显示 没有与其相关的文档的命令行选项。
	
	--target-help
	在标准输出打印工具的 target-specific命令行选项描述。对于一些目标,还会打印额外的信息。
	
	--help={class|[^]qualifier}[,…]
	在标准输出打印编译器编译选项的描述, 适用于所有的指定的 class 和qualifier,支持的class如下:
	
	‘optimizers’
	显示所有的编译器支持的优化选项.(译者注:   gcc --help='optimizers')
	
	‘warnings’
	显示所有的编译器控制警告信息的选项
	
	‘target’
	显示特殊目标选项,和 --target-help 不一样, 链接和汇编的target-specific 并不显示.因为这些工具目前不支持扩展--help = 句法。
	
	‘params’
	显示被 --param选项识别的值(译者注: 使用 gcc --help='params' 显示所有的value, 比如有一个值为:predictable-branch-outcom ,使用 :gcc  1.c --param predictable-branch-outcome=20 这样的方法(NAME=VALUE)使用它)
	
	language
	显示语言支持的选项,这些语言必须要能被GCC支持 (译者注:  gcc --help='c++')
	
	‘common’
	显示所有语言公共的选项
	
	‘undocumented’
	显示所有没有文档的选项(译者注: 提示 This switch lacks documentation)
	
	‘joined’
	显示带有参数的选项,该选项的要求是出现在等号后面。 例如‘--help=target’
	
	‘separate’
	显示带有参数的选项,该选项的要求是单独的单词跟随着原始选项。例如 ‘-o output-file’
	
	例如, 想要显示没有文档的和编译器支持的特殊机器目标的编译选项,使用:
	--help=target,undocumented
	
	可以通过在参数的前面添加限制符^, 从而不显示限制符后面的选项。例如想要显示所有的警告选项(除了joined 和undocumented类型的),使用:
	--help=warnings,^joined,^undocumented
	
	注意:--help= 不能只给反向限定符
	
	合并多个参数是没问题的,尽管这样可能因为约束问题导致什么都显示不出来.一种能显示出来的情况是输入的值中有 target,例如我想要显示所有的特殊机器目标的优化选项:
	--help=target,optimizers
	
	--help=选项能重复使用,会连续显示请求的参数,以及跳过重复的参数。
	
	如果 -Q 在 --help之前被使用,那么 --help 的描述将会被改变。取而代之的是显示一个选项,显示每一个值的状态,disabled ,enabled 或者其他特殊的值(假设编译器在使用-help=选项的时候知道这一点)
	
	如下是ARM下GCC的一个例子:
	  % gcc -Q -mabi=2 --help=target -c
	The following options are target specific:
	-mabi=                                2
	-mabort-on-noreturn                   [disabled]
	-mapcs                                [disabled]
	
	
	输入对命令行前面的选项十分敏感,例如如下例子显示-O2优化中的选项:
	-Q -O2 --help=optimizers
	
	你还可以查看-O3使用的优化选项:
	gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
	gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
	diff /tmp/O2-opts /tmp/O3-opts | grep enabled
	
	
	--version
	显示gcc版本和版权
	
	-pass-exit-codes
	正常情况下在GCC工程中,如果编译器在任何阶段返回不成功的状态,则错误码返回值为1。如果你指定了 -pass-exit-codes ,GCC工程将会使用更高等级的错误数字替换1.如果遇到内部编译器错误，C、c++和Fortran前端返回4。
	
	-pipe
	在编译的各个阶段之间使用管道而不是临时文件进行通信,在某些系统汇编器不会读pipe, GNU没这个问题
	
	-specs=file
	编译器读入标准规格文件后处理文件,为了覆盖gcc驱动程序在确定要传递给cc1、cc1plus、as、ld的开关时使用的默认设置.命令行可以输入不止一个的-specs=file,从做到右按顺序读入.参考https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gcc/Spec-Files.html#Spec-Files参阅更多信息。
	

	